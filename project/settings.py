"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-d^#utcl9#_flh4pc=r4nrmh8@h0kf-fh!a+jawlzzn75j-^5yt'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django_countries',
    'accounts',
    'store',
    'cart',
    'orders',
    'coupons',
    'api_endpoints',
    'rest_framework',
    'rest_framework.authtoken',

]


# Middleware for language switching
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',  # Add this
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



# The role of the Middleware 
# | Middleware                 | Purpose                                                             |
# | -------------------------- | ------------------------------------------------------------------- |
# | `SecurityMiddleware`       | Adds security headers.                                              |
# | `SessionMiddleware`        | Manages session data in cookies.                                    |
# | `LocaleMiddleware`         | Enables language translation based on user/browser.                 |
# | `CommonMiddleware`         | Adds behaviors like URL normalization (e.g., trailing slashes).     |
# | `CsrfViewMiddleware`       | Protects against CSRF attacks.                                      |
# | `AuthenticationMiddleware` | Associates users with requests.                                     |
# | `MessageMiddleware`        | Enables temporary messages (e.g., “Password updated successfully”). |
# | `XFrameOptionsMiddleware`  | Prevents your site from being framed (clickjacking protection).     |








ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_processors.cart_item_count', 
                'cart.context_processors.get_categories',           
                'django.template.context_processors.i18n',      
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTHENTICATION_BACKENDS = [
    'accounts.backends.EmailAuthBackend',  
    'django.contrib.auth.backends.ModelBackend',  # optional fallback
]

AUTH_USER_MODEL = 'accounts.Account'  




# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Cairo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# STATIC FIELS
STATIC_URL = '/static/'

STATICFILES_DIRS =  [
    BASE_DIR / 'static'
]

STATIC_ROOT = (BASE_DIR/'staticfiles/')

# MEDIA FILES
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'



# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# settings.py

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'Mahmoud.sayyedahmed900@gmail.com'
EMAIL_HOST_PASSWORD = 'twsc umom cjdr gxvq'  # not your Gmail password
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER



# settings of cache
CACHES = {
 'default': {
    'BACKEND': 'django_redis.cache.RedisCache',
    'LOCATION': 'redis://127.0.0.1:6379/1',
    'OPTIONS': {
        'CLIENT_CLASS': 'django_redis.client.DefaultClient',
},}}


 
# # Optional: Store sessions in Redis
# SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
# SESSION_CACHE_ALIAS = 'default'


CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Redis URL
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  # Optional, for storing results



# Default language
LANGUAGE_CODE = 'en'

# Enable internationalization
USE_I18N = True
USE_L10N = True

# Timezone settings (optional)
TIME_ZONE = 'UTC'
USE_TZ = True

# Supported languages
from django.utils.translation import gettext_lazy as _

LANGUAGES = [
    ('en', _('English')),
    ('ar', _('Arabic')),
]

# Path to store translation files
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

















